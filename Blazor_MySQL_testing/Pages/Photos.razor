@page "/photos"

@using Blazor_MySQL_testing.Models
@using DataLibrary
@using Microsoft.Extensions.Configuration
@using Blazor_MySQL_testing.Data
@inject IDataAccess _data
@inject IConfiguration _config;

	class PeoplePhotos
	{
		public string FirstName {get; set; }
		public string LastName {get; set; }
		public int PhotoId {get; set; }
		public string Url {get; set; }
	
	}



<h1>Photos</h1>

<form>
	<div class="form-row">
		<p>

		</p>
	</div>
	<h3>Insert new photo</h3>
	<div class="form-row">
		<div class="col">
			<input class="form-control" placeholder="Photo url" @bind="url_input" />
		</div>
		<div class="col">
			<input class="form-control" placeholder="Person ID for photo" @bind="person_id_input" />
		</div>
		<div class="col">
			<button type="submit" class="btn btn-primary" @onclick="InsertData">Insert</button>
		</div>
	</div>
	<div class="form-row">
		<p>

		</p>
	</div>

	<!--<button type="submit" class="btn btn-warning" @onclick="UpdateData">Update</button>-->

</form>

@if (PeoplePhotos == null) { 
	<p>Loading...</p>
}
else
{
	<div class="container">
		<div class="row row-cols-1 row-cols-md-4">
	
			@foreach (var photo2 in peoplePhotos)
			{
				<div class="col mb-4">
					<div class="card">
						<img class="card-img-top" src="@photo2." alt="Image ID: @photo.id">
						<div class="card-body">
							<h5 class="card-title">Id: @photo.id by person Id: @photo.person_id</h5>
							<p class="card-text">This is a photo with the Id of @photo.id made by person with Id @photo.person_id</p>
							<a href="/people" class="btn btn-primary">View people</a>
							<button type="submit" class="btn btn-danger" @onclick="(() => DeleteData(photo.id))">Delete</button>
						</div>
					</div>
				</div>
	
			}
		</div>
	</div>
}

@code {
	List<PhotoModel> photos;
	List<PersonModel> people;

	string url_input;
	string person_id_input;
	

	private async Task InsertData()
	{
		string sql = "INSERT INTO photos (url, person_id) VALUES(@url, @person_id)";

		await _data.SaveData(sql, new { url = url_input, person_id = person_id_input }, _config.GetConnectionString("default"));

		await OnInitializedAsync();
	}

	private async Task InsertData2()
	{
		string sql = "INSERT INTO photos (url, person_id) VALUES(@url, @person_id)";

		await _data.SaveData(sql, new { url = url_input, person_id = person_id_input }, _config.GetConnectionString("default"));

		await OnInitializedAsync();
	}

	private async Task UpdateData()
	{
		//string sql = "UPDATE people SET first_name = 'Jovan' WHERE last_name = 'Bob'";
		string sql = "UPDATE people SET first_name = @first_name WHERE last_name = @last_name";

		await _data.SaveData(sql, new { first_name = "Jovan", last_name = "Bob" }, _config.GetConnectionString("default"));

		await OnInitializedAsync();
	}

	private async Task DeleteData(int my_id)
	{
		//ovdije stavljam id="@id" i to mi znaci da je id iz tablice jednak @id varijabli u ovoj liniji ispod toga
		//u kojoj pozivam SaveData
		string sql = "DELETE FROM photos WHERE id = @id";

		//ovdije mi ovaj "id" predstavlja @id iz linije gore, a my_id mi je vrijednost koju sam dao u funkciju
		await _data.SaveData(sql, new { id = my_id }, _config.GetConnectionString("default"));

		await OnInitializedAsync();
	}

	protected override async Task OnInitializedAsync()
	{
	//		string sql = "select * from photos";
//		photos = await _data.LoadData<PhotoModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

//		sql = "select * from people";
//		people = await _data.LoadData<PersonModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

		string sql = "select people.first_name, people.last_name, photos.id photo_id, photos.url from people join photos on people.id = photos.person_id";
		var peoplePhos = await _data.LoadData<PeoplePhotos, dynamic>(sql, new {}, _config.GetConnectionString("default"));


	//		var myresult = await _data.LoadData(_config.GetConnectionString("default")con.Query<PeoplePhotos>("SELECT * FROM photos").ToList()));
	}
}
